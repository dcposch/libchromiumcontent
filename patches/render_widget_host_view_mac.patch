diff --git a/content/browser/renderer_host/render_widget_host_view_mac.mm b/content/browser/renderer_host/render_widget_host_view_mac.mm
index 84a6008..c6a91bc 100644
--- a/content/browser/renderer_host/render_widget_host_view_mac.mm
+++ b/content/browser/renderer_host/render_widget_host_view_mac.mm
@@ -98,6 +98,10 @@ using blink::WebMouseEvent;
 using blink::WebMouseWheelEvent;
 using blink::WebGestureEvent;
 
+namespace content {
+extern bool g_use_transparent_window;
+}
+
 namespace {
 
 // Whether a keyboard event has been reserved by OSX.
@@ -529,6 +533,7 @@ RenderWidgetHostViewMac::RenderWidgetHostViewMac(RenderWidgetHost* widget,
   // Paint this view host with |background_color_| when there is no content
   // ready to draw.
   background_layer_.reset([[CALayer alloc] init]);
+  if ([cocoa_view() isOpaque])
   [background_layer_
       setBackgroundColor:gfx::CGColorCreateFromSkColor(background_color_)];
   [cocoa_view_ setLayer:background_layer_];
@@ -598,6 +603,9 @@ void RenderWidgetHostViewMac::EnsureBrowserCompositorView() {
     delegated_frame_host_->WasShown(ui::LatencyInfo());
     browser_compositor_state_ = BrowserCompositorActive;
   }
+
+  if (![cocoa_view() isOpaque])
+    root_layer_->GetCompositor()->SetHostHasTransparentBackground(true);
 }
 
 void RenderWidgetHostViewMac::SuspendBrowserCompositorView() {
@@ -1773,6 +1781,18 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 }
 
 - (BOOL)acceptsFirstMouse:(NSEvent*)theEvent {
+  const SEL selector = @selector(acceptsFirstMouse:);
+  if ([self.window.delegate respondsToSelector:selector]) {
+    NSInvocation* invocation = [NSInvocation
+        invocationWithMethodSignature:[[self.window.delegate class]
+            instanceMethodSignatureForSelector:selector]];
+    [invocation setTarget:self.window.delegate];
+    [invocation setSelector:selector];
+    [invocation invoke];
+    BOOL accept;
+    [invocation getReturnValue:&accept];
+    return accept;
+  }
   return [self acceptsMouseEventsWhenInactive];
 }
 
@@ -1896,6 +1916,7 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
   if (EventIsReservedBySystem(theEvent))
     return NO;
 
+#if 0
   // If we return |NO| from this function, cocoa will send the key event to
   // the menu and only if the menu does not process the event to |keyDown:|. We
   // want to send the event to a renderer _before_ sending it to the menu, so
@@ -1909,6 +1930,7 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
     DCHECK(![[NSApp mainMenu] performKeyEquivalent:theEvent]);
     return NO;
   }
+#endif
 
   // Command key combinations are sent via performKeyEquivalent rather than
   // keyDown:. We just forward this on and if WebCore doesn't want to handle
@@ -3340,7 +3362,10 @@ extern NSString *NSTextInputReplacementRangeAttributeName;
 }
 
 - (BOOL)isOpaque {
-  return YES;
+  if (self.window)
+    return [self.window isOpaque];
+  else
+    return !content::g_use_transparent_window;
 }
 
 // "-webkit-app-region: drag | no-drag" is implemented on Mac by excluding
